// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  owner         Owner? // user may or may not be owner
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  touristSpots  Tourist_spots[]
  reviews       Reviews[]
  bookings      Booking[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Owner {
  id        String      @id @default(uuid())
  userId    String      @unique
  hotel     Hotel? //optional one to one relation
  lounge    Lounge?
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  resturant Restaurant?
  address   String
  contactNumber String
  

}

model Hotel {
  id              String    @id @default(cuid())
  ownerId         String    @unique
  owner           Owner     @relation(fields: [ownerId], references: [id])
  location        String
  featured        Boolean? @default(false)
  contact_number  String
  contact_email   String
  rooms_available Int
  name            String
  image           Image[] 
  facilities      String
  description     String
  menuId          String?    @unique
  menu            Menu?     @relation(fields: [menuId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reviews         Reviews[]
  bookings        Booking[]
}

model Lounge {
  id             String    @id @default(uuid())
  name           String
  location       String
  ownerId        String    @unique
  owner          Owner     @relation(fields: [ownerId], references: [id])
  capacity       Int
  facilities     String
  description    String
  contact_number String
  contact_email  String
  opening_hours  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  images         Image[]
  reviews        Reviews[]
  bookings       Booking[]
}

model Restaurant {
  id             String    @id @default(cuid())
  ownerId        String    @unique
  owner          Owner     @relation(fields: [ownerId], references: [id])
  location       String
  featured       Boolean
  contact_number String
  contact_email  String
  opening_hours  String
  name           String
  facilities     String
  description    String
  menuId         String?    @unique
  menu           Menu?     @relation(fields: [menuId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  images         Image[]
  reviews        Reviews[]
  bookings       Booking[]
}

model Image {
  id  String @id @default(cuid())
  url String

  menu   Menu?   @relation(fields: [menuId], references: [id])
  menuId String?

  hotel   Hotel?  @relation(fields: [hotelId], references: [id])
  hotelId String?

  restaurantId  String?
  restaurant    Restaurant?    @relation(fields: [restaurantId], references: [id])
  touristSpotId String?
  touristSpot   Tourist_spots? @relation(fields: [touristSpotId], references: [id])
  loungeId      String?
  lounge        Lounge?        @relation(fields: [loungeId], references: [id])
}

model Menu {
  id               String      @id @default(cuid())
  images           Image[]
  featured_cousine String
  restaurant       Restaurant?
  hotel            Hotel?
}

model Tourist_spots {
  id           String    @id @default(cuid())
  name         String
  location     String
  description  String
  images       Image[]
  openingHours String
  entryFee     String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  reviews      Reviews[]
}

model Reviews {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  hotel         Hotel?         @relation(fields: [hotelId], references: [id])
  hotelId       String?
  touristSpotId String?
  touristSpot   Tourist_spots? @relation(fields: [touristSpotId], references: [id])
  loungeId      String?
  Lounge        Lounge?        @relation(fields: [loungeId], references: [id])
  rating        Int
  comment       String
}

model Booking {
  id           String      @id @default(cuid())
  userId       String
  hotelId      String?
  loungeId     String?
  restaurantId String?
  user         User        @relation(fields: [userId], references: [id])
  lounge       Lounge?     @relation(fields: [loungeId], references: [id])
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  hotel        Hotel?      @relation(fields: [hotelId], references: [id])
}
